{"version":3,"sources":["logo.svg","Components/Home.js","Components/Login.js","Components/Register.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","src","logo","alt","href","target","rel","to","Login","particles","useRef","useEffect","matchMedia","addEventListener","e","newColorScheme","matches","current","loadTheme","options","particlesConfig","id","container","for","type","placeholder","class","Register","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0lCAAe,G,YAAA,IAA0B,kC,QC2B1BA,MAvBf,WACI,OACI,qBAAKC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACS,8CADT,0BAGA,mBACIH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJR,yBAQA,cAAC,IAAD,CAAMC,GAAG,SAAT,kCACA,cAAC,IAAD,CAAMA,GAAG,YAAT,2C,yBCoBDC,MAtCf,WACI,IAAMC,EAAYC,mBAWlB,OATAC,qBAAU,WACNC,WAAW,gCACNC,iBAAiB,UAAU,SAACC,GACzB,IAAMC,EAAiBD,EAAEE,QAAU,OAAS,QAE5CP,EAAUQ,QAAQC,UAAUH,QAErC,IAGC,gCACI,cAAC,IAAD,CAAWI,QAASC,EAAiBC,GAAG,cAAcC,UAAWb,IACjE,sBAAMT,UAAU,MAAhB,SACI,iCACI,4CAEA,uBAAOuB,IAAI,WAAX,sBACA,uBAAOC,KAAK,OAAOC,YAAY,iBAAiBJ,GAAG,aAEnD,uBAAOE,IAAI,WAAX,sBACA,uBAAOC,KAAK,WAAWC,YAAY,WAAWJ,GAAG,aAEjD,4CACA,sBAAKK,MAAM,SAAX,UACI,sBAAKA,MAAM,KAAX,UAAgB,mBAAGA,MAAM,kBAAzB,aACA,sBAAKA,MAAM,KAAX,UAAgB,mBAAGA,MAAM,oBAAzB,uBAIZ,+BCUGC,MAzCf,WACI,IAAMlB,EAAYC,mBAWlB,OATAC,qBAAU,WACNC,WAAW,gCACNC,iBAAiB,UAAU,SAACC,GACzB,IAAMC,EAAiBD,EAAEE,QAAU,OAAS,QAE5CP,EAAUQ,QAAQC,UAAUH,QAErC,IAGC,gCACI,cAAC,IAAD,CAAWI,QAASC,EAAiBC,GAAG,cAAcC,UAAWb,IACjE,sBAAMT,UAAU,MAAhB,SACI,iCACI,+CAEA,uBAAOuB,IAAI,WAAX,sBACA,uBAAOC,KAAK,OAAOC,YAAY,iBAAiBJ,GAAG,aAEnD,uBAAOE,IAAI,WAAX,sBACA,uBAAOC,KAAK,WAAWC,YAAY,WAAWJ,GAAG,aAEjD,uBAAOE,IAAI,kBAAX,8BACA,uBAAOC,KAAK,WAAWC,YAAY,mBAAmBJ,GAAG,oBAEzD,4CACA,sBAAKK,MAAM,SAAX,UACI,sBAAKA,MAAM,KAAX,UAAgB,mBAAGA,MAAM,kBAAzB,aACA,sBAAKA,MAAM,KAAX,UAAgB,mBAAGA,MAAM,oBAAzB,uBAIZ,+B,OCtBGE,MAVf,WACI,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhC,IACjC,cAAC,IAAD,CAAO+B,KAAK,SAASC,UAAWvB,IAChC,cAAC,IAAD,CAAOsB,KAAK,YAAYC,UAAWJ,QCA3BK,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCXRC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAAC,EAAD,QAGRC,SAASC,eAAe,SDsHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.058e6d4c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport logo from '../logo.svg';\nimport { Link } from \"react-router-dom\";\n\nfunction Home() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n                <Link to=\"/login\">Watch Login Template</Link>\n                <Link to=\"/register\">Watch Register Template</Link>\n            </header>\n        </div>\n    );\n}\n\nexport default Home;\n","import React, { useRef, useEffect } from 'react';\nimport particlesConfig from \"../particles.json\";\nimport Particles from \"react-tsparticles\";\nfunction Login() {\n    const particles = useRef();\n\n    useEffect(() => {\n        matchMedia(\"(prefers-color-scheme: dark)\")\n            .addEventListener(\"change\", (e) => {\n                const newColorScheme = e.matches ? \"dark\" : \"light\";\n\n                particles.current.loadTheme(newColorScheme);\n            });\n    }, []);\n\n    return (\n        <div>\n            <Particles options={particlesConfig} id=\"tsparticles\" container={particles} />\n            <main className=\"box\">\n                <form>\n                    <h3>Login Here</h3>\n\n                    <label for=\"username\">Username</label>\n                    <input type=\"text\" placeholder=\"Email or Phone\" id=\"username\" />\n\n                    <label for=\"password\">Password</label>\n                    <input type=\"password\" placeholder=\"Password\" id=\"password\" />\n\n                    <button>Log In</button>\n                    <div class=\"social\">\n                        <div class=\"go\"><i class=\"fab fa-google\"></i> Google</div>\n                        <div class=\"fb\"><i class=\"fab fa-facebook\"></i> Facebook</div>\n                    </div>\n                </form>\n            </main>\n            <footer>\n            </footer>\n        </div>\n    );\n}\n\nexport default Login;","import React, { useRef, useEffect } from 'react';\nimport particlesConfig from \"../particles.json\";\nimport Particles from \"react-tsparticles\";\n\nfunction Register() {\n    const particles = useRef();\n\n    useEffect(() => {\n        matchMedia(\"(prefers-color-scheme: dark)\")\n            .addEventListener(\"change\", (e) => {\n                const newColorScheme = e.matches ? \"dark\" : \"light\";\n\n                particles.current.loadTheme(newColorScheme);\n            });\n    }, []);\n\n    return (\n        <div>\n            <Particles options={particlesConfig} id=\"tsparticles\" container={particles} />\n            <main className=\"box\">\n                <form>\n                    <h3>Register Here</h3>\n\n                    <label for=\"username\">Username</label>\n                    <input type=\"text\" placeholder=\"Email or Phone\" id=\"username\" />\n\n                    <label for=\"password\">Password</label>\n                    <input type=\"password\" placeholder=\"Password\" id=\"password\" />\n\n                    <label for=\"confirmPassword\">Confirm Password</label>\n                    <input type=\"password\" placeholder=\"Confirm Password\" id=\"confirmPassword\" />\n\n                    <button>Log In</button>\n                    <div class=\"social\">\n                        <div class=\"go\"><i class=\"fab fa-google\"></i> Google</div>\n                        <div class=\"fb\"><i class=\"fab fa-facebook\"></i> Facebook</div>\n                    </div>\n                </form>\n            </main>\n            <footer>\n            </footer>\n        </div>\n    );\n}\n\nexport default Register;","import React from 'react';\nimport './App.css';\nimport Home from \"./Components/Home\";\nimport Login from \"./Components/Login\";\nimport Register from \"./Components/Register\";\nimport { Switch, Route } from \"react-router\";\n\nfunction App() {\n    return (\n        <Switch>\n            <Route exact path='/' component={Home}/>\n            <Route path='/login' component={Login}/>\n            <Route path='/register' component={Register}/>\n        </Switch>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}